'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _wdioDotReporter = require('wdio-dot-reporter');

var _wdioDotReporter2 = _interopRequireDefault(_wdioDotReporter);

var _utilsConfigParser = require('./utils/ConfigParser');

var _utilsConfigParser2 = _interopRequireDefault(_utilsConfigParser);

var _utilsBaseReporter = require('./utils/BaseReporter');

var _utilsBaseReporter2 = _interopRequireDefault(_utilsBaseReporter);

var Launcher = (function () {
    function Launcher(configFile, argv) {
        _classCallCheck(this, Launcher);

        this.configParser = new _utilsConfigParser2['default']();
        this.configParser.addConfigFile(configFile);
        this.configParser.merge(argv);

        this.reporter = this.initReporter();

        this.argv = argv;
        this.configFile = configFile;

        this.exitCode = 0;
        this.hasTriggeredExitRoutine = false;
        this.hasStartedAnyProcess = false;
        this.processes = [];
        this.schedule = [];
    }

    /**
     * check if multiremote or wdio test
     */

    _createClass(Launcher, [{
        key: 'isMultiremote',
        value: function isMultiremote() {
            var caps = this.configParser.getCapabilities();
            return !Array.isArray(caps);
        }

        /**
         * initialise reporter
         */
    }, {
        key: 'initReporter',
        value: function initReporter() {
            var reporter = new _utilsBaseReporter2['default']();
            var config = this.configParser.getConfig();

            /**
             * if no reporter is set or config property is in a wrong format
             * just use the dot reporter
             */
            if (!config.reporter || !Array.isArray(config.reporter)) {
                reporter.add(new _wdioDotReporter2['default'](reporter));
                return reporter;
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _getIterator(config.reporter), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _reporter = _step.value;

                    try {
                        var Reporter = require('wdio-' + _reporter + '-reporter');
                        _reporter.add(new Reporter(_reporter));
                    } catch (e) {
                        throw new Error('reporter "wdio-' + _reporter + '-reporter" is not installed');
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return reporter;
        }

        /**
         * run sequence
         * @return  {Promise} that only gets resolves with either an exitCode or an error
         */
    }, {
        key: 'run',
        value: function run() {
            var config, caps, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, capabilities, exitCode;

            return _regeneratorRuntime.async(function run$(context$2$0) {
                var _this = this;

                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        config = this.configParser.getConfig();
                        caps = this.configParser.getCapabilities();

                        this.reporter.emit('start');
                        context$2$0.prev = 3;
                        context$2$0.next = 6;
                        return _regeneratorRuntime.awrap(config.onPrepare(config, caps));

                    case 6:
                        context$2$0.next = 11;
                        break;

                    case 8:
                        context$2$0.prev = 8;
                        context$2$0.t0 = context$2$0['catch'](3);
                        return context$2$0.abrupt('return', context$2$0.t0);

                    case 11:
                        if (!this.isMultiremote()) {
                            context$2$0.next = 13;
                            break;
                        }

                        return context$2$0.abrupt('return', this.startInstance(this.configParser.getSpecs(), caps));

                    case 13:
                        _iteratorNormalCompletion2 = true;
                        _didIteratorError2 = false;
                        _iteratorError2 = undefined;
                        context$2$0.prev = 16;

                        /**
                         * schedule test runs
                         */
                        for (_iterator2 = _getIterator(caps); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            capabilities = _step2.value;

                            this.schedule.push({
                                specs: this.configParser.getSpecs(capabilities.specs, capabilities.exclude),
                                availableInstances: capabilities.maxInstances || config.maxInstances || 1,
                                runningInstances: 0
                            });
                        }

                        /**
                         * catches ctrl+c event
                         */
                        context$2$0.next = 24;
                        break;

                    case 20:
                        context$2$0.prev = 20;
                        context$2$0.t1 = context$2$0['catch'](16);
                        _didIteratorError2 = true;
                        _iteratorError2 = context$2$0.t1;

                    case 24:
                        context$2$0.prev = 24;
                        context$2$0.prev = 25;

                        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                            _iterator2['return']();
                        }

                    case 27:
                        context$2$0.prev = 27;

                        if (!_didIteratorError2) {
                            context$2$0.next = 30;
                            break;
                        }

                        throw _iteratorError2;

                    case 30:
                        return context$2$0.finish(27);

                    case 31:
                        return context$2$0.finish(24);

                    case 32:
                        process.on('SIGINT', this.exitHandler.bind(this));

                        /**
                         * make sure the program will not close instantly
                         */
                        process.stdin.resume();

                        context$2$0.next = 36;
                        return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {
                            _this.resolve = resolve;
                            _this.runSpecs();
                        }));

                    case 36:
                        exitCode = context$2$0.sent;
                        context$2$0.prev = 37;
                        context$2$0.next = 40;
                        return _regeneratorRuntime.awrap(config.onComplete(exitCode));

                    case 40:
                        context$2$0.next = 45;
                        break;

                    case 42:
                        context$2$0.prev = 42;
                        context$2$0.t2 = context$2$0['catch'](37);
                        return context$2$0.abrupt('return', context$2$0.t2);

                    case 45:
                        return context$2$0.abrupt('return', exitCode);

                    case 46:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[3, 8], [16, 20, 24, 32], [25,, 27, 31], [37, 42]]);
        }

        /**
         * run multiple single remote tests
         */
    }, {
        key: 'runSpecs',
        value: function runSpecs() {
            var _this2 = this;

            var specsLeft = 0;
            var isRunning = false;

            this.schedule.forEach(function (capability, cid) {
                var specFiles = capability.specs.length;
                specsLeft += specFiles;

                for (var i = 0; capability.availableInstances > 0 && i < specFiles; i++) {
                    _this2.startInstance([capability.specs.pop()], cid);
                    capability.availableInstances--;
                    capability.runningInstances++;
                }
                isRunning = isRunning || capability.runningInstances > 0;
            });

            return specsLeft === 0 && !isRunning;
        }

        /**
         * Start instance in a child process.
         * @param  {Object|Object[]} capabilities  desired capabilities of instance
         */
    }, {
        key: 'startInstance',
        value: function startInstance(specs, i) {
            var childProcess = _child_process2['default'].fork(__dirname + '/runner.js', [], {
                cwd: process.cwd()
            });

            this.processes.push(childProcess);

            childProcess.on('message', this.messageHandler.bind(this)).on('exit', this.endHandler.bind(this));

            childProcess.send({
                cid: i,
                command: 'run',
                configFile: this.configFile,
                argv: this.argv,
                specs: specs,
                isMultiremote: this.isMultiremote()
            });
        }

        /**
         * emit event from child process to reporter
         * @param  {Object} m  event object
         */
    }, {
        key: 'messageHandler',
        value: function messageHandler(m) {
            this.hasStartedAnyProcess = true;

            /**
             * update schedule
             */
            if (m.event === 'runner:end' || m.event === 'runner:error') {
                this.schedule[m.cid].availableInstances++;
                this.schedule[m.cid].runningInstances--;
            }

            if (m.event === 'runner:error') {
                this.reporter.emit('error', m);
            }

            this.reporter.emit(m.event, m);
        }

        /**
         * Closes test runner process once all instances finished and excited process.
         * @param  {Number} childProcessExitCode  exit code of child process
         */
    }, {
        key: 'endHandler',
        value: function endHandler(childProcessExitCode) {
            this.exitCode = this.exitCode || childProcessExitCode;

            if (!this.isMultiremote() && !this.runSpecs()) {
                return;
            }

            this.reporter.emit('end', {
                sigint: this.hasTriggeredExitRoutine,
                exitCode: this.exitCode
            });

            this.resolve(this.exitCode);
        }

        /**
         * Make sure all started selenium sessions get closed properly and prevent
         * having dead driver processes. To do so let the runner end its Selenium
         * session first before killing
         */
    }, {
        key: 'exitHandler',
        value: function exitHandler() {
            if (this.hasTriggeredExitRoutine || !this.hasStartedAnyProcess) {
                console.log('\nKilling process, bye!');
                return this.resolve(1);
            }

            console.log('\n\nEnd selenium sessions properly ...\n(press crtl+c again to hard kill the runner)\n');

            this.hasTriggeredExitRoutine = true;
        }
    }]);

    return Launcher;
})();

exports['default'] = Launcher;
module.exports = exports['default'];

/**
 * if it is an object run multiremote test
 */
//# sourceMappingURL=data:application/json;base64,
