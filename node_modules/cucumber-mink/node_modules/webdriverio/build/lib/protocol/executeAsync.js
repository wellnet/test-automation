/**
 *
 * Inject a snippet of JavaScript into the page for execution in the context of the currently selected
 * frame. The executed script is assumed to be asynchronous and must signal that is done by invoking
 * the provided callback, which is always provided as the final argument to the function. The value
 * to this callback will be returned to the client.
 *
 * Asynchronous script commands may not span page loads. If an unload event is fired while waiting
 * for a script result, an error should be returned to the client.
 *
 * The script argument defines the script to execute in the form of a function body. The function will
 * be invoked with the provided args array and the values may be accessed via the arguments object
 * in the order specified. The final argument will always be a callback function that must be invoked
 * to signal that the script has finished.
 *
 * Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement
 * reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script
 * result will be returned to the client as [WebElement JSON objects](https://code.google.com/p/selenium/wiki/JsonWireProtocol#WebElement_JSON_Object).
 *
 * <example>
    :executeAsync.js
    client
        .timeoutsAsyncScript(5000)
        .executeAsync(function(a, b, c, d, done) {
            // browser context - you may not access neither client nor console
            setTimeout(function() {
                done(a + b + c + d);
            }, 3000);
        }, 1, 2, 3, 4).then(function(ret) {
            // node.js context - client and console are available
            console.log(ret.value); // outputs: 10
        });
 * </example>
 *
 * @param {String|Function} script     The script to execute.
 * @param {*}               arguments  script arguments
 *
 * @returns {*}             The script result.
 *
 * @see  https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/execute_async
 * @type protocol
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _utilsErrorHandler = require('../utils/ErrorHandler');

var executeAsync = function executeAsync() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    var script = args.shift();

    /*!
     * parameter check
     */
    if (typeof script !== 'string' && typeof script !== 'function') {
        throw new _utilsErrorHandler.ProtocolError('number or type of arguments don\'t agree with execute protocol command');
    }

    /*!
     * instances started as multibrowserinstance can't getting called with
     * a function parameter, therefor we need to check if it starts with "function () {"
     */
    if (typeof script === 'function' || this.inMultibrowserMode && script.indexOf('function (') === 0) {
        script = 'return (' + script + ').apply(null, arguments)';
    }

    return this.requestHandler.create('/session/:sessionId/execute_async', {
        script: script,
        args: args
    });
};

exports['default'] = executeAsync;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9wcm90b2NvbC9leGVjdXRlQXN5bmMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBNEM4Qix1QkFBdUI7O0FBRXJELElBQUksWUFBWSxHQUFHLFNBQWYsWUFBWSxHQUFzQjtzQ0FBTixJQUFJO0FBQUosWUFBSTs7O0FBQ2hDLFFBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTs7Ozs7QUFLekIsUUFBSyxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxFQUFHO0FBQzlELGNBQU0scUNBQWtCLHdFQUF3RSxDQUFDLENBQUE7S0FDcEc7Ozs7OztBQU1ELFFBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFLLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQUFBQyxFQUFFO0FBQ2pHLGNBQU0sZ0JBQWMsTUFBTSw2QkFBMEIsQ0FBQTtLQUN2RDs7QUFFRCxXQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLG1DQUFtQyxFQUFFO0FBQ25FLGNBQU0sRUFBRSxNQUFNO0FBQ2QsWUFBSSxFQUFFLElBQUk7S0FDYixDQUFDLENBQUE7Q0FDTCxDQUFBOztxQkFFYyxZQUFZIiwiZmlsZSI6ImV4ZWN1dGVBc3luYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIEluamVjdCBhIHNuaXBwZXQgb2YgSmF2YVNjcmlwdCBpbnRvIHRoZSBwYWdlIGZvciBleGVjdXRpb24gaW4gdGhlIGNvbnRleHQgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZFxuICogZnJhbWUuIFRoZSBleGVjdXRlZCBzY3JpcHQgaXMgYXNzdW1lZCB0byBiZSBhc3luY2hyb25vdXMgYW5kIG11c3Qgc2lnbmFsIHRoYXQgaXMgZG9uZSBieSBpbnZva2luZ1xuICogdGhlIHByb3ZpZGVkIGNhbGxiYWNrLCB3aGljaCBpcyBhbHdheXMgcHJvdmlkZWQgYXMgdGhlIGZpbmFsIGFyZ3VtZW50IHRvIHRoZSBmdW5jdGlvbi4gVGhlIHZhbHVlXG4gKiB0byB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgcmV0dXJuZWQgdG8gdGhlIGNsaWVudC5cbiAqXG4gKiBBc3luY2hyb25vdXMgc2NyaXB0IGNvbW1hbmRzIG1heSBub3Qgc3BhbiBwYWdlIGxvYWRzLiBJZiBhbiB1bmxvYWQgZXZlbnQgaXMgZmlyZWQgd2hpbGUgd2FpdGluZ1xuICogZm9yIGEgc2NyaXB0IHJlc3VsdCwgYW4gZXJyb3Igc2hvdWxkIGJlIHJldHVybmVkIHRvIHRoZSBjbGllbnQuXG4gKlxuICogVGhlIHNjcmlwdCBhcmd1bWVudCBkZWZpbmVzIHRoZSBzY3JpcHQgdG8gZXhlY3V0ZSBpbiB0aGUgZm9ybSBvZiBhIGZ1bmN0aW9uIGJvZHkuIFRoZSBmdW5jdGlvbiB3aWxsXG4gKiBiZSBpbnZva2VkIHdpdGggdGhlIHByb3ZpZGVkIGFyZ3MgYXJyYXkgYW5kIHRoZSB2YWx1ZXMgbWF5IGJlIGFjY2Vzc2VkIHZpYSB0aGUgYXJndW1lbnRzIG9iamVjdFxuICogaW4gdGhlIG9yZGVyIHNwZWNpZmllZC4gVGhlIGZpbmFsIGFyZ3VtZW50IHdpbGwgYWx3YXlzIGJlIGEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBtdXN0IGJlIGludm9rZWRcbiAqIHRvIHNpZ25hbCB0aGF0IHRoZSBzY3JpcHQgaGFzIGZpbmlzaGVkLlxuICpcbiAqIEFyZ3VtZW50cyBtYXkgYmUgYW55IEpTT04tcHJpbWl0aXZlLCBhcnJheSwgb3IgSlNPTiBvYmplY3QuIEpTT04gb2JqZWN0cyB0aGF0IGRlZmluZSBhIFdlYkVsZW1lbnRcbiAqIHJlZmVyZW5jZSB3aWxsIGJlIGNvbnZlcnRlZCB0byB0aGUgY29ycmVzcG9uZGluZyBET00gZWxlbWVudC4gTGlrZXdpc2UsIGFueSBXZWJFbGVtZW50cyBpbiB0aGUgc2NyaXB0XG4gKiByZXN1bHQgd2lsbCBiZSByZXR1cm5lZCB0byB0aGUgY2xpZW50IGFzIFtXZWJFbGVtZW50IEpTT04gb2JqZWN0c10oaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9zZWxlbml1bS93aWtpL0pzb25XaXJlUHJvdG9jb2wjV2ViRWxlbWVudF9KU09OX09iamVjdCkuXG4gKlxuICogPGV4YW1wbGU+XG4gICAgOmV4ZWN1dGVBc3luYy5qc1xuICAgIGNsaWVudFxuICAgICAgICAudGltZW91dHNBc3luY1NjcmlwdCg1MDAwKVxuICAgICAgICAuZXhlY3V0ZUFzeW5jKGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGRvbmUpIHtcbiAgICAgICAgICAgIC8vIGJyb3dzZXIgY29udGV4dCAtIHlvdSBtYXkgbm90IGFjY2VzcyBuZWl0aGVyIGNsaWVudCBub3IgY29uc29sZVxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkb25lKGEgKyBiICsgYyArIGQpO1xuICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgIH0sIDEsIDIsIDMsIDQpLnRoZW4oZnVuY3Rpb24ocmV0KSB7XG4gICAgICAgICAgICAvLyBub2RlLmpzIGNvbnRleHQgLSBjbGllbnQgYW5kIGNvbnNvbGUgYXJlIGF2YWlsYWJsZVxuICAgICAgICAgICAgY29uc29sZS5sb2cocmV0LnZhbHVlKTsgLy8gb3V0cHV0czogMTBcbiAgICAgICAgfSk7XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNjcmlwdCAgICAgVGhlIHNjcmlwdCB0byBleGVjdXRlLlxuICogQHBhcmFtIHsqfSAgICAgICAgICAgICAgIGFyZ3VtZW50cyAgc2NyaXB0IGFyZ3VtZW50c1xuICpcbiAqIEByZXR1cm5zIHsqfSAgICAgICAgICAgICBUaGUgc2NyaXB0IHJlc3VsdC5cbiAqXG4gKiBAc2VlICBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3NlbGVuaXVtL3dpa2kvSnNvbldpcmVQcm90b2NvbCMvc2Vzc2lvbi86c2Vzc2lvbklkL2V4ZWN1dGVfYXN5bmNcbiAqIEB0eXBlIHByb3RvY29sXG4gKlxuICovXG5cbmltcG9ydCB7IFByb3RvY29sRXJyb3IgfSBmcm9tICcuLi91dGlscy9FcnJvckhhbmRsZXInXG5cbmxldCBleGVjdXRlQXN5bmMgPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgIGxldCBzY3JpcHQgPSBhcmdzLnNoaWZ0KClcblxuICAgIC8qIVxuICAgICAqIHBhcmFtZXRlciBjaGVja1xuICAgICAqL1xuICAgIGlmICgodHlwZW9mIHNjcmlwdCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHNjcmlwdCAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFByb3RvY29sRXJyb3IoJ251bWJlciBvciB0eXBlIG9mIGFyZ3VtZW50cyBkb25cXCd0IGFncmVlIHdpdGggZXhlY3V0ZSBwcm90b2NvbCBjb21tYW5kJylcbiAgICB9XG5cbiAgICAvKiFcbiAgICAgKiBpbnN0YW5jZXMgc3RhcnRlZCBhcyBtdWx0aWJyb3dzZXJpbnN0YW5jZSBjYW4ndCBnZXR0aW5nIGNhbGxlZCB3aXRoXG4gICAgICogYSBmdW5jdGlvbiBwYXJhbWV0ZXIsIHRoZXJlZm9yIHdlIG5lZWQgdG8gY2hlY2sgaWYgaXQgc3RhcnRzIHdpdGggXCJmdW5jdGlvbiAoKSB7XCJcbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIHNjcmlwdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodGhpcy5pbk11bHRpYnJvd3Nlck1vZGUgJiYgc2NyaXB0LmluZGV4T2YoJ2Z1bmN0aW9uICgnKSA9PT0gMCkpIHtcbiAgICAgICAgc2NyaXB0ID0gYHJldHVybiAoJHtzY3JpcHR9KS5hcHBseShudWxsLCBhcmd1bWVudHMpYFxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlcXVlc3RIYW5kbGVyLmNyZWF0ZSgnL3Nlc3Npb24vOnNlc3Npb25JZC9leGVjdXRlX2FzeW5jJywge1xuICAgICAgICBzY3JpcHQ6IHNjcmlwdCxcbiAgICAgICAgYXJnczogYXJnc1xuICAgIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGV4ZWN1dGVBc3luY1xuIl19
