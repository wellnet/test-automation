/**
 *
 * Move the mouse by an offset of the specificed element. If no element is specified,
 * the move is relative to the current mouse cursor. If an element is provided but
 * no offset, the mouse will be moved to the center of the element. If the element
 * is not visible, it will be scrolled into view.
 *
 * @param {String} element  Opaque ID assigned to the element to move to, as described in the WebElement JSON Object. If not specified or is null, the offset is relative to current position of the mouse.
 * @param {Number} xoffset  X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.
 * @param {Number} yoffset  Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.
 *
 * @see  https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/moveto
 * @type protocol
 *
 */

'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _utilsErrorHandler = require('../utils/ErrorHandler');

var moveTo = function moveTo(element, xoffset, yoffset) {
    var data = {};

    if (typeof element === 'string') {
        data.element = element;
    }

    if (typeof xoffset === 'number') {
        data.xoffset = xoffset;
    }

    if (typeof yoffset === 'number') {
        data.yoffset = yoffset;
    }

    /**
     * if no attribute is set, throw error
     */
    if (_Object$keys(data).length === 0) {
        throw new _utilsErrorHandler.ProtocolError('number or type of arguments don\'t agree with moveTo command');
    }

    return this.requestHandler.create('/session/:sessionId/moveto', data);
};

exports['default'] = moveTo;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9wcm90b2NvbC9tb3ZlVG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQWdCOEIsdUJBQXVCOztBQUVyRCxJQUFJLE1BQU0sR0FBRyxTQUFULE1BQU0sQ0FBYSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRTtBQUM5QyxRQUFJLElBQUksR0FBRyxFQUFFLENBQUE7O0FBRWIsUUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7QUFDN0IsWUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7S0FDekI7O0FBRUQsUUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7QUFDN0IsWUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7S0FDekI7O0FBRUQsUUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7QUFDN0IsWUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7S0FDekI7Ozs7O0FBS0QsUUFBSSxhQUFZLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDaEMsY0FBTSxxQ0FBa0IsOERBQThELENBQUMsQ0FBQTtLQUMxRjs7QUFFRCxXQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLDRCQUE0QixFQUFFLElBQUksQ0FBQyxDQUFBO0NBQ3hFLENBQUE7O3FCQUVjLE1BQU0iLCJmaWxlIjoibW92ZVRvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogTW92ZSB0aGUgbW91c2UgYnkgYW4gb2Zmc2V0IG9mIHRoZSBzcGVjaWZpY2VkIGVsZW1lbnQuIElmIG5vIGVsZW1lbnQgaXMgc3BlY2lmaWVkLFxuICogdGhlIG1vdmUgaXMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgbW91c2UgY3Vyc29yLiBJZiBhbiBlbGVtZW50IGlzIHByb3ZpZGVkIGJ1dFxuICogbm8gb2Zmc2V0LCB0aGUgbW91c2Ugd2lsbCBiZSBtb3ZlZCB0byB0aGUgY2VudGVyIG9mIHRoZSBlbGVtZW50LiBJZiB0aGUgZWxlbWVudFxuICogaXMgbm90IHZpc2libGUsIGl0IHdpbGwgYmUgc2Nyb2xsZWQgaW50byB2aWV3LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbGVtZW50ICBPcGFxdWUgSUQgYXNzaWduZWQgdG8gdGhlIGVsZW1lbnQgdG8gbW92ZSB0bywgYXMgZGVzY3JpYmVkIGluIHRoZSBXZWJFbGVtZW50IEpTT04gT2JqZWN0LiBJZiBub3Qgc3BlY2lmaWVkIG9yIGlzIG51bGwsIHRoZSBvZmZzZXQgaXMgcmVsYXRpdmUgdG8gY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgbW91c2UuXG4gKiBAcGFyYW0ge051bWJlcn0geG9mZnNldCAgWCBvZmZzZXQgdG8gbW92ZSB0bywgcmVsYXRpdmUgdG8gdGhlIHRvcC1sZWZ0IGNvcm5lciBvZiB0aGUgZWxlbWVudC4gSWYgbm90IHNwZWNpZmllZCwgdGhlIG1vdXNlIHdpbGwgbW92ZSB0byB0aGUgbWlkZGxlIG9mIHRoZSBlbGVtZW50LlxuICogQHBhcmFtIHtOdW1iZXJ9IHlvZmZzZXQgIFkgb2Zmc2V0IHRvIG1vdmUgdG8sIHJlbGF0aXZlIHRvIHRoZSB0b3AtbGVmdCBjb3JuZXIgb2YgdGhlIGVsZW1lbnQuIElmIG5vdCBzcGVjaWZpZWQsIHRoZSBtb3VzZSB3aWxsIG1vdmUgdG8gdGhlIG1pZGRsZSBvZiB0aGUgZWxlbWVudC5cbiAqXG4gKiBAc2VlICBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3NlbGVuaXVtL3dpa2kvSnNvbldpcmVQcm90b2NvbCMvc2Vzc2lvbi86c2Vzc2lvbklkL21vdmV0b1xuICogQHR5cGUgcHJvdG9jb2xcbiAqXG4gKi9cblxuaW1wb3J0IHsgUHJvdG9jb2xFcnJvciB9IGZyb20gJy4uL3V0aWxzL0Vycm9ySGFuZGxlcidcblxubGV0IG1vdmVUbyA9IGZ1bmN0aW9uIChlbGVtZW50LCB4b2Zmc2V0LCB5b2Zmc2V0KSB7XG4gICAgbGV0IGRhdGEgPSB7fVxuXG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICBkYXRhLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB4b2Zmc2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgICBkYXRhLnhvZmZzZXQgPSB4b2Zmc2V0XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB5b2Zmc2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgICBkYXRhLnlvZmZzZXQgPSB5b2Zmc2V0XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaWYgbm8gYXR0cmlidXRlIGlzIHNldCwgdGhyb3cgZXJyb3JcbiAgICAgKi9cbiAgICBpZiAoT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBQcm90b2NvbEVycm9yKCdudW1iZXIgb3IgdHlwZSBvZiBhcmd1bWVudHMgZG9uXFwndCBhZ3JlZSB3aXRoIG1vdmVUbyBjb21tYW5kJylcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0SGFuZGxlci5jcmVhdGUoJy9zZXNzaW9uLzpzZXNzaW9uSWQvbW92ZXRvJywgZGF0YSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgbW92ZVRvXG4iXX0=
