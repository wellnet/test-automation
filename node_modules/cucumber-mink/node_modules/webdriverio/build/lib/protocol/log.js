/**
 *
 * Get the log for a given log type. Log buffer is reset after each request
 *
 * @param {String} type  The [log type](https://code.google.com/p/selenium/wiki/JsonWireProtocol#Log_Type). This must be provided.
 * @returns {Object[]} The list of [log entries](https://code.google.com/p/selenium/wiki/JsonWireProtocol#Log_Entry_JSON_Object)
 *
 * @see  https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/log
 * @type protocol
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _utilsErrorHandler = require('../utils/ErrorHandler');

var log = function log(type) {
    var _this = this;

    if (typeof type !== 'string' || type === '') {
        throw new _utilsErrorHandler.ProtocolError('number or type of arguments don\'t agree with log command');
    }

    return this.logTypes().then(function (types) {
        if (types.value.indexOf(type) === -1) {
            throw new _utilsErrorHandler.ProtocolError('this log type ("' + type + '") is not available for this browser/device');
        }

        return _this.requestHandler.create('/session/:sessionId/log', {
            type: type
        });
    });
};

exports['default'] = log;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9wcm90b2NvbC9sb2cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQVk4Qix1QkFBdUI7O0FBRXJELElBQUksR0FBRyxHQUFHLFNBQU4sR0FBRyxDQUFhLElBQUksRUFBRTs7O0FBQ3RCLFFBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksS0FBSyxFQUFFLEVBQUU7QUFDekMsY0FBTSxxQ0FBa0IsMkRBQTJELENBQUMsQ0FBQTtLQUN2Rjs7QUFFRCxXQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLLEVBQUs7QUFDbkMsWUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUNsQyxrQkFBTSwwREFBcUMsSUFBSSxpREFBOEMsQ0FBQTtTQUNoRzs7QUFFRCxlQUFPLE1BQUssY0FBYyxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRTtBQUN6RCxnQkFBSSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUE7S0FDTCxDQUFDLENBQUE7Q0FDTCxDQUFBOztxQkFFYyxHQUFHIiwiZmlsZSI6ImxvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIEdldCB0aGUgbG9nIGZvciBhIGdpdmVuIGxvZyB0eXBlLiBMb2cgYnVmZmVyIGlzIHJlc2V0IGFmdGVyIGVhY2ggcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlICBUaGUgW2xvZyB0eXBlXShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3NlbGVuaXVtL3dpa2kvSnNvbldpcmVQcm90b2NvbCNMb2dfVHlwZSkuIFRoaXMgbXVzdCBiZSBwcm92aWRlZC5cbiAqIEByZXR1cm5zIHtPYmplY3RbXX0gVGhlIGxpc3Qgb2YgW2xvZyBlbnRyaWVzXShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3NlbGVuaXVtL3dpa2kvSnNvbldpcmVQcm90b2NvbCNMb2dfRW50cnlfSlNPTl9PYmplY3QpXG4gKlxuICogQHNlZSAgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9zZWxlbml1bS93aWtpL0pzb25XaXJlUHJvdG9jb2wjL3Nlc3Npb24vOnNlc3Npb25JZC9sb2dcbiAqIEB0eXBlIHByb3RvY29sXG4gKlxuICovXG5cbmltcG9ydCB7IFByb3RvY29sRXJyb3IgfSBmcm9tICcuLi91dGlscy9FcnJvckhhbmRsZXInXG5cbmxldCBsb2cgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFByb3RvY29sRXJyb3IoJ251bWJlciBvciB0eXBlIG9mIGFyZ3VtZW50cyBkb25cXCd0IGFncmVlIHdpdGggbG9nIGNvbW1hbmQnKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxvZ1R5cGVzKCkudGhlbigodHlwZXMpID0+IHtcbiAgICAgICAgaWYgKHR5cGVzLnZhbHVlLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUHJvdG9jb2xFcnJvcihgdGhpcyBsb2cgdHlwZSAoXCIke3R5cGV9XCIpIGlzIG5vdCBhdmFpbGFibGUgZm9yIHRoaXMgYnJvd3Nlci9kZXZpY2VgKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdEhhbmRsZXIuY3JlYXRlKCcvc2Vzc2lvbi86c2Vzc2lvbklkL2xvZycsIHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBsb2dcbiJdfQ==
