/**
 *
 * Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.
 * The executed script is assumed to be synchronous and the result of evaluating the script is returned to
 * the client.
 *
 * The script argument defines the script to execute in the form of a function body. The value returned by
 * that function will be returned to the client. The function will be invoked with the provided args array
 * and the values may be accessed via the arguments object in the order specified.
 *
 * Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement
 * reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script
 * result will be returned to the client as [WebElement JSON objects](https://code.google.com/p/selenium/wiki/JsonWireProtocol#WebElement_JSON_Object).
 *
 * <example>
    :execute.js
    client.execute(function(a, b, c, d) {
        // browser context - you may not access neither client nor console
        return a + b + c + d;
    }, 1, 2, 3, 4).then(function(ret) {
        // node.js context - client and console are available
        console.log(ret.value); // outputs: 10
    });
 * </example>
 *
 * @param {String|Function} script                     The script to execute.
 * @param {*}               [argument1,...,argumentN]  script arguments
 *
 * @returns {*}             The script result.
 *
 * @see  https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/execute
 * @type protocol
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _utilsErrorHandler = require('../utils/ErrorHandler');

var execute = function execute() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    var script = args.shift();

    /*!
     * parameter check
     */
    if (typeof script !== 'string' && typeof script !== 'function') {
        throw new _utilsErrorHandler.ProtocolError('number or type of arguments don\'t agree with execute protocol command');
    }

    /*!
     * instances started as multibrowserinstance can't getting called with
     * a function paramter, therefor we need to check if it starts with "function () {"
     */
    if (typeof script === 'function' || this.inMultibrowserMode && script.indexOf('function (') === 0) {
        script = 'return (' + script + ').apply(null, arguments)';
    }

    return this.requestHandler.create('/session/:sessionId/execute', { script: script, args: args });
};

exports['default'] = execute;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9wcm90b2NvbC9leGVjdXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQW1DOEIsdUJBQXVCOztBQUVyRCxJQUFJLE9BQU8sR0FBRyxTQUFWLE9BQU8sR0FBc0I7c0NBQU4sSUFBSTtBQUFKLFlBQUk7OztBQUMzQixRQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7Ozs7O0FBS3pCLFFBQUssT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsRUFBRztBQUM5RCxjQUFNLHFDQUFrQix3RUFBd0UsQ0FBQyxDQUFBO0tBQ3BHOzs7Ozs7QUFNRCxRQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSyxJQUFJLENBQUMsa0JBQWtCLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEFBQUMsRUFBRTtBQUNqRyxjQUFNLGdCQUFjLE1BQU0sNkJBQTBCLENBQUE7S0FDdkQ7O0FBRUQsV0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsRUFBRSxFQUFFLE1BQU0sRUFBTixNQUFNLEVBQUUsSUFBSSxFQUFKLElBQUksRUFBRSxDQUFDLENBQUE7Q0FDckYsQ0FBQTs7cUJBRWMsT0FBTyIsImZpbGUiOiJleGVjdXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogSW5qZWN0IGEgc25pcHBldCBvZiBKYXZhU2NyaXB0IGludG8gdGhlIHBhZ2UgZm9yIGV4ZWN1dGlvbiBpbiB0aGUgY29udGV4dCBvZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGZyYW1lLlxuICogVGhlIGV4ZWN1dGVkIHNjcmlwdCBpcyBhc3N1bWVkIHRvIGJlIHN5bmNocm9ub3VzIGFuZCB0aGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIHNjcmlwdCBpcyByZXR1cm5lZCB0b1xuICogdGhlIGNsaWVudC5cbiAqXG4gKiBUaGUgc2NyaXB0IGFyZ3VtZW50IGRlZmluZXMgdGhlIHNjcmlwdCB0byBleGVjdXRlIGluIHRoZSBmb3JtIG9mIGEgZnVuY3Rpb24gYm9keS4gVGhlIHZhbHVlIHJldHVybmVkIGJ5XG4gKiB0aGF0IGZ1bmN0aW9uIHdpbGwgYmUgcmV0dXJuZWQgdG8gdGhlIGNsaWVudC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aXRoIHRoZSBwcm92aWRlZCBhcmdzIGFycmF5XG4gKiBhbmQgdGhlIHZhbHVlcyBtYXkgYmUgYWNjZXNzZWQgdmlhIHRoZSBhcmd1bWVudHMgb2JqZWN0IGluIHRoZSBvcmRlciBzcGVjaWZpZWQuXG4gKlxuICogQXJndW1lbnRzIG1heSBiZSBhbnkgSlNPTi1wcmltaXRpdmUsIGFycmF5LCBvciBKU09OIG9iamVjdC4gSlNPTiBvYmplY3RzIHRoYXQgZGVmaW5lIGEgV2ViRWxlbWVudFxuICogcmVmZXJlbmNlIHdpbGwgYmUgY29udmVydGVkIHRvIHRoZSBjb3JyZXNwb25kaW5nIERPTSBlbGVtZW50LiBMaWtld2lzZSwgYW55IFdlYkVsZW1lbnRzIGluIHRoZSBzY3JpcHRcbiAqIHJlc3VsdCB3aWxsIGJlIHJldHVybmVkIHRvIHRoZSBjbGllbnQgYXMgW1dlYkVsZW1lbnQgSlNPTiBvYmplY3RzXShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3NlbGVuaXVtL3dpa2kvSnNvbldpcmVQcm90b2NvbCNXZWJFbGVtZW50X0pTT05fT2JqZWN0KS5cbiAqXG4gKiA8ZXhhbXBsZT5cbiAgICA6ZXhlY3V0ZS5qc1xuICAgIGNsaWVudC5leGVjdXRlKGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgLy8gYnJvd3NlciBjb250ZXh0IC0geW91IG1heSBub3QgYWNjZXNzIG5laXRoZXIgY2xpZW50IG5vciBjb25zb2xlXG4gICAgICAgIHJldHVybiBhICsgYiArIGMgKyBkO1xuICAgIH0sIDEsIDIsIDMsIDQpLnRoZW4oZnVuY3Rpb24ocmV0KSB7XG4gICAgICAgIC8vIG5vZGUuanMgY29udGV4dCAtIGNsaWVudCBhbmQgY29uc29sZSBhcmUgYXZhaWxhYmxlXG4gICAgICAgIGNvbnNvbGUubG9nKHJldC52YWx1ZSk7IC8vIG91dHB1dHM6IDEwXG4gICAgfSk7XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNjcmlwdCAgICAgICAgICAgICAgICAgICAgIFRoZSBzY3JpcHQgdG8gZXhlY3V0ZS5cbiAqIEBwYXJhbSB7Kn0gICAgICAgICAgICAgICBbYXJndW1lbnQxLC4uLixhcmd1bWVudE5dICBzY3JpcHQgYXJndW1lbnRzXG4gKlxuICogQHJldHVybnMgeyp9ICAgICAgICAgICAgIFRoZSBzY3JpcHQgcmVzdWx0LlxuICpcbiAqIEBzZWUgIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avc2VsZW5pdW0vd2lraS9Kc29uV2lyZVByb3RvY29sIy9zZXNzaW9uLzpzZXNzaW9uSWQvZXhlY3V0ZVxuICogQHR5cGUgcHJvdG9jb2xcbiAqXG4gKi9cblxuaW1wb3J0IHsgUHJvdG9jb2xFcnJvciB9IGZyb20gJy4uL3V0aWxzL0Vycm9ySGFuZGxlcidcblxubGV0IGV4ZWN1dGUgPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgIGxldCBzY3JpcHQgPSBhcmdzLnNoaWZ0KClcblxuICAgIC8qIVxuICAgICAqIHBhcmFtZXRlciBjaGVja1xuICAgICAqL1xuICAgIGlmICgodHlwZW9mIHNjcmlwdCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHNjcmlwdCAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFByb3RvY29sRXJyb3IoJ251bWJlciBvciB0eXBlIG9mIGFyZ3VtZW50cyBkb25cXCd0IGFncmVlIHdpdGggZXhlY3V0ZSBwcm90b2NvbCBjb21tYW5kJylcbiAgICB9XG5cbiAgICAvKiFcbiAgICAgKiBpbnN0YW5jZXMgc3RhcnRlZCBhcyBtdWx0aWJyb3dzZXJpbnN0YW5jZSBjYW4ndCBnZXR0aW5nIGNhbGxlZCB3aXRoXG4gICAgICogYSBmdW5jdGlvbiBwYXJhbXRlciwgdGhlcmVmb3Igd2UgbmVlZCB0byBjaGVjayBpZiBpdCBzdGFydHMgd2l0aCBcImZ1bmN0aW9uICgpIHtcIlxuICAgICAqL1xuICAgIGlmICh0eXBlb2Ygc2NyaXB0ID09PSAnZnVuY3Rpb24nIHx8ICh0aGlzLmluTXVsdGlicm93c2VyTW9kZSAmJiBzY3JpcHQuaW5kZXhPZignZnVuY3Rpb24gKCcpID09PSAwKSkge1xuICAgICAgICBzY3JpcHQgPSBgcmV0dXJuICgke3NjcmlwdH0pLmFwcGx5KG51bGwsIGFyZ3VtZW50cylgXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdEhhbmRsZXIuY3JlYXRlKCcvc2Vzc2lvbi86c2Vzc2lvbklkL2V4ZWN1dGUnLCB7IHNjcmlwdCwgYXJncyB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBleGVjdXRlXG4iXX0=
