/**
 *
 * Gets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.
 *
 * <example>
    :alertText.js
    // close a dialog box if is opened
    client.alertText( function( err, res ) {
        if ( res != null ) {
            this.alertDismiss()
        }
    });
 * </example>
 *
 * @param {String=} text  Keystrokes to send to the prompt() dialog.
 * @returns {String}      The text of the currently displayed alert.
 *
 * @see  https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/alert_text
 * @type protocol
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var alertText = function alertText(text) {
    var requestOptions = '/session/:sessionId/alert_text';
    var data = {};

    if (typeof text === 'string') {
        requestOptions = {
            path: requestOptions,
            method: 'POST'
        };

        data = { text: text };
    }

    return this.unify(this.requestHandler.create(requestOptions, data), {
        extractValue: true
    });
};

exports['default'] = alertText;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9wcm90b2NvbC9hbGVydFRleHQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBLElBQUksU0FBUyxHQUFHLFNBQVosU0FBUyxDQUFhLElBQUksRUFBRTtBQUM1QixRQUFJLGNBQWMsR0FBRyxnQ0FBZ0MsQ0FBQTtBQUNyRCxRQUFJLElBQUksR0FBRyxFQUFFLENBQUE7O0FBRWIsUUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7QUFDMUIsc0JBQWMsR0FBRztBQUNiLGdCQUFJLEVBQUUsY0FBYztBQUNwQixrQkFBTSxFQUFFLE1BQU07U0FDakIsQ0FBQTs7QUFFRCxZQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUE7S0FDeEI7O0FBRUQsV0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRTtBQUNoRSxvQkFBWSxFQUFFLElBQUk7S0FDckIsQ0FBQyxDQUFBO0NBQ0wsQ0FBQTs7cUJBRWMsU0FBUyIsImZpbGUiOiJhbGVydFRleHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBHZXRzIHRoZSB0ZXh0IG9mIHRoZSBjdXJyZW50bHkgZGlzcGxheWVkIEphdmFTY3JpcHQgYWxlcnQoKSwgY29uZmlybSgpLCBvciBwcm9tcHQoKSBkaWFsb2cuXG4gKlxuICogPGV4YW1wbGU+XG4gICAgOmFsZXJ0VGV4dC5qc1xuICAgIC8vIGNsb3NlIGEgZGlhbG9nIGJveCBpZiBpcyBvcGVuZWRcbiAgICBjbGllbnQuYWxlcnRUZXh0KCBmdW5jdGlvbiggZXJyLCByZXMgKSB7XG4gICAgICAgIGlmICggcmVzICE9IG51bGwgKSB7XG4gICAgICAgICAgICB0aGlzLmFsZXJ0RGlzbWlzcygpXG4gICAgICAgIH1cbiAgICB9KTtcbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZz19IHRleHQgIEtleXN0cm9rZXMgdG8gc2VuZCB0byB0aGUgcHJvbXB0KCkgZGlhbG9nLlxuICogQHJldHVybnMge1N0cmluZ30gICAgICBUaGUgdGV4dCBvZiB0aGUgY3VycmVudGx5IGRpc3BsYXllZCBhbGVydC5cbiAqXG4gKiBAc2VlICBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3NlbGVuaXVtL3dpa2kvSnNvbldpcmVQcm90b2NvbCMvc2Vzc2lvbi86c2Vzc2lvbklkL2FsZXJ0X3RleHRcbiAqIEB0eXBlIHByb3RvY29sXG4gKlxuICovXG5cbmxldCBhbGVydFRleHQgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIGxldCByZXF1ZXN0T3B0aW9ucyA9ICcvc2Vzc2lvbi86c2Vzc2lvbklkL2FsZXJ0X3RleHQnXG4gICAgbGV0IGRhdGEgPSB7fVxuXG4gICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHBhdGg6IHJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCdcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEgPSB7IHRleHQ6IHRleHQgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnVuaWZ5KHRoaXMucmVxdWVzdEhhbmRsZXIuY3JlYXRlKHJlcXVlc3RPcHRpb25zLCBkYXRhKSwge1xuICAgICAgICBleHRyYWN0VmFsdWU6IHRydWVcbiAgICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBhbGVydFRleHRcbiJdfQ==
