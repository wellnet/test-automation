/**
 *
 * Get tag name of a DOM-element found by given selector.
 *
 * <example>
    :index.html
    <div id="elem">Lorem ipsum</div>

    :getTagName.js
    client.getTagName('#elem').then(function(tagName) {
        console.log(tagName); // outputs: "div"
    });
 * </example>
 *
 * @param   {String}           selector   element with requested tag name
 * @returns {String|String[]}             the element's tag name, as a lowercase string
 *
 * @uses protocol/elements, protocol/elementIdName
 * @type property
 *
 */

'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _utilsErrorHandler = require('../utils/ErrorHandler');

var getTagName = function getTagName(selector) {
    var _this = this;

    return this.elements(selector).then(function (res) {
        /**
         * throw NoSuchElement error if no element was found
         */
        if (!res.value || res.value.length === 0) {
            throw new _utilsErrorHandler.CommandError(7);
        }

        var elementIdNameCommands = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = _getIterator(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var elem = _step.value;

                elementIdNameCommands.push(_this.elementIdName(elem.ELEMENT));
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                    _iterator['return']();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return _Promise.all(elementIdNameCommands);
    }).then(function (tagNames) {
        tagNames = tagNames.map(function (tagName) {
            return tagName.value.toLowerCase();
        });
        return tagNames.length === 1 ? tagNames[0] : tagNames;
    });
};

exports['default'] = getTagName;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9nZXRUYWdOYW1lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQXNCNkIsdUJBQXVCOztBQUVwRCxJQUFJLFVBQVUsR0FBRyxTQUFiLFVBQVUsQ0FBYSxRQUFRLEVBQUU7OztBQUNqQyxXQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRyxFQUFLOzs7O0FBSXpDLFlBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUN0QyxrQkFBTSxvQ0FBaUIsQ0FBQyxDQUFDLENBQUE7U0FDNUI7O0FBRUQsWUFBSSxxQkFBcUIsR0FBRyxFQUFFLENBQUE7Ozs7OztBQUM5Qiw4Q0FBaUIsR0FBRyxDQUFDLEtBQUssNEdBQUU7b0JBQW5CLElBQUk7O0FBQ1QscUNBQXFCLENBQUMsSUFBSSxDQUFDLE1BQUssYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO2FBQy9EOzs7Ozs7Ozs7Ozs7Ozs7O0FBRUQsZUFBTyxTQUFRLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0tBQzVDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxRQUFRLEVBQUs7QUFDbEIsZ0JBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUMsT0FBTzttQkFBSyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtTQUFBLENBQUMsQ0FBQTtBQUNqRSxlQUFPLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUE7S0FDeEQsQ0FBQyxDQUFBO0NBQ0wsQ0FBQTs7cUJBRWMsVUFBVSIsImZpbGUiOiJnZXRUYWdOYW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogR2V0IHRhZyBuYW1lIG9mIGEgRE9NLWVsZW1lbnQgZm91bmQgYnkgZ2l2ZW4gc2VsZWN0b3IuXG4gKlxuICogPGV4YW1wbGU+XG4gICAgOmluZGV4Lmh0bWxcbiAgICA8ZGl2IGlkPVwiZWxlbVwiPkxvcmVtIGlwc3VtPC9kaXY+XG5cbiAgICA6Z2V0VGFnTmFtZS5qc1xuICAgIGNsaWVudC5nZXRUYWdOYW1lKCcjZWxlbScpLnRoZW4oZnVuY3Rpb24odGFnTmFtZSkge1xuICAgICAgICBjb25zb2xlLmxvZyh0YWdOYW1lKTsgLy8gb3V0cHV0czogXCJkaXZcIlxuICAgIH0pO1xuICogPC9leGFtcGxlPlxuICpcbiAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgICAgICBzZWxlY3RvciAgIGVsZW1lbnQgd2l0aCByZXF1ZXN0ZWQgdGFnIG5hbWVcbiAqIEByZXR1cm5zIHtTdHJpbmd8U3RyaW5nW119ICAgICAgICAgICAgIHRoZSBlbGVtZW50J3MgdGFnIG5hbWUsIGFzIGEgbG93ZXJjYXNlIHN0cmluZ1xuICpcbiAqIEB1c2VzIHByb3RvY29sL2VsZW1lbnRzLCBwcm90b2NvbC9lbGVtZW50SWROYW1lXG4gKiBAdHlwZSBwcm9wZXJ0eVxuICpcbiAqL1xuXG5pbXBvcnQgeyBDb21tYW5kRXJyb3IgfSBmcm9tICcuLi91dGlscy9FcnJvckhhbmRsZXInXG5cbmxldCBnZXRUYWdOYW1lID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMoc2VsZWN0b3IpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogdGhyb3cgTm9TdWNoRWxlbWVudCBlcnJvciBpZiBubyBlbGVtZW50IHdhcyBmb3VuZFxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKCFyZXMudmFsdWUgfHwgcmVzLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENvbW1hbmRFcnJvcig3KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVsZW1lbnRJZE5hbWVDb21tYW5kcyA9IFtdXG4gICAgICAgIGZvciAobGV0IGVsZW0gb2YgcmVzLnZhbHVlKSB7XG4gICAgICAgICAgICBlbGVtZW50SWROYW1lQ29tbWFuZHMucHVzaCh0aGlzLmVsZW1lbnRJZE5hbWUoZWxlbS5FTEVNRU5UKSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChlbGVtZW50SWROYW1lQ29tbWFuZHMpXG4gICAgfSkudGhlbigodGFnTmFtZXMpID0+IHtcbiAgICAgICAgdGFnTmFtZXMgPSB0YWdOYW1lcy5tYXAoKHRhZ05hbWUpID0+IHRhZ05hbWUudmFsdWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgcmV0dXJuIHRhZ05hbWVzLmxlbmd0aCA9PT0gMSA/IHRhZ05hbWVzWzBdIDogdGFnTmFtZXNcbiAgICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRUYWdOYW1lXG4iXX0=
