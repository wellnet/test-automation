/**
 *
 * Get the width and height for an DOM-element based given selector.
 *
 * <example>
    :getElementSize.js
    client
        .getElementSize('.header-logo-wordmark').then(function(size) {
            console.log(size) // outputs: { width: 100, height: 200 }
        })
        .getElementSize('.header-logo-wordmark', 'width').then(function(width) {
            console.log(width) // outputs: 100
        })
        .getElementSize('.header-logo-wordmark', 'height').then(function(height) {
            console.log(height) // outputs: 200
        });
 * </example>
 *
 * @param   {String} selector element with requested size
 * @returns {Object}          requested element size (`{width:number, height:number}`)
 *
 * @uses protocol/elements, protocol/elementIdSize
 * @type property
 *
 */

'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _utilsErrorHandler = require('../utils/ErrorHandler');

var getElementSize = function getElementSize(selector, prop) {
    return this.elements(selector).then(function (res) {
        /**
         * throw NoSuchElement error if no element was found
         */
        if (!res.value || res.value.length === 0) {
            throw new _utilsErrorHandler.CommandError(7);
        }

        var elementIdSizeCommands = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = _getIterator(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var elem = _step.value;

                elementIdSizeCommands.push(this.elementIdSize(elem.ELEMENT));
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                    _iterator['return']();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return _Promise.all(elementIdSizeCommands);
    }).then(function (sizes) {
        sizes = sizes.map(function (size) {
            if (typeof prop === 'string' && prop.match(/(width|height)/)) {
                return size.value[prop];
            }

            return {
                width: size.value.width,
                height: size.value.height
            };
        });

        return sizes.length === 1 ? sizes[0] : sizes;
    });
};

exports['default'] = getElementSize;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9nZXRFbGVtZW50U2l6ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBMEI2Qix1QkFBdUI7O0FBRXBELElBQUksY0FBYyxHQUFHLFNBQWpCLGNBQWMsQ0FBYSxRQUFRLEVBQUUsSUFBSSxFQUFFO0FBQzNDLFdBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUU7Ozs7QUFJL0MsWUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQ3RDLGtCQUFNLG9DQUFpQixDQUFDLENBQUMsQ0FBQTtTQUM1Qjs7QUFFRCxZQUFJLHFCQUFxQixHQUFHLEVBQUUsQ0FBQTs7Ozs7O0FBQzlCLDhDQUFpQixHQUFHLENBQUMsS0FBSyw0R0FBRTtvQkFBbkIsSUFBSTs7QUFDVCxxQ0FBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTthQUMvRDs7Ozs7Ozs7Ozs7Ozs7OztBQUVELGVBQU8sU0FBUSxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQTtLQUM1QyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSyxFQUFLO0FBQ2YsYUFBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJLEVBQUs7QUFDeEIsZ0JBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtBQUMxRCx1QkFBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQzFCOztBQUVELG1CQUFPO0FBQ0gscUJBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUs7QUFDdkIsc0JBQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07YUFDNUIsQ0FBQTtTQUNKLENBQUMsQ0FBQTs7QUFFRixlQUFPLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUE7S0FDL0MsQ0FBQyxDQUFBO0NBQ0wsQ0FBQTs7cUJBRWMsY0FBYyIsImZpbGUiOiJnZXRFbGVtZW50U2l6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIEdldCB0aGUgd2lkdGggYW5kIGhlaWdodCBmb3IgYW4gRE9NLWVsZW1lbnQgYmFzZWQgZ2l2ZW4gc2VsZWN0b3IuXG4gKlxuICogPGV4YW1wbGU+XG4gICAgOmdldEVsZW1lbnRTaXplLmpzXG4gICAgY2xpZW50XG4gICAgICAgIC5nZXRFbGVtZW50U2l6ZSgnLmhlYWRlci1sb2dvLXdvcmRtYXJrJykudGhlbihmdW5jdGlvbihzaXplKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzaXplKSAvLyBvdXRwdXRzOiB7IHdpZHRoOiAxMDAsIGhlaWdodDogMjAwIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmdldEVsZW1lbnRTaXplKCcuaGVhZGVyLWxvZ28td29yZG1hcmsnLCAnd2lkdGgnKS50aGVuKGZ1bmN0aW9uKHdpZHRoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh3aWR0aCkgLy8gb3V0cHV0czogMTAwXG4gICAgICAgIH0pXG4gICAgICAgIC5nZXRFbGVtZW50U2l6ZSgnLmhlYWRlci1sb2dvLXdvcmRtYXJrJywgJ2hlaWdodCcpLnRoZW4oZnVuY3Rpb24oaGVpZ2h0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhoZWlnaHQpIC8vIG91dHB1dHM6IDIwMFxuICAgICAgICB9KTtcbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAcGFyYW0gICB7U3RyaW5nfSBzZWxlY3RvciBlbGVtZW50IHdpdGggcmVxdWVzdGVkIHNpemVcbiAqIEByZXR1cm5zIHtPYmplY3R9ICAgICAgICAgIHJlcXVlc3RlZCBlbGVtZW50IHNpemUgKGB7d2lkdGg6bnVtYmVyLCBoZWlnaHQ6bnVtYmVyfWApXG4gKlxuICogQHVzZXMgcHJvdG9jb2wvZWxlbWVudHMsIHByb3RvY29sL2VsZW1lbnRJZFNpemVcbiAqIEB0eXBlIHByb3BlcnR5XG4gKlxuICovXG5cbmltcG9ydCB7IENvbW1hbmRFcnJvciB9IGZyb20gJy4uL3V0aWxzL0Vycm9ySGFuZGxlcidcblxubGV0IGdldEVsZW1lbnRTaXplID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBwcm9wKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMoc2VsZWN0b3IpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAvKipcbiAgICAgICAgICogdGhyb3cgTm9TdWNoRWxlbWVudCBlcnJvciBpZiBubyBlbGVtZW50IHdhcyBmb3VuZFxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKCFyZXMudmFsdWUgfHwgcmVzLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENvbW1hbmRFcnJvcig3KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVsZW1lbnRJZFNpemVDb21tYW5kcyA9IFtdXG4gICAgICAgIGZvciAobGV0IGVsZW0gb2YgcmVzLnZhbHVlKSB7XG4gICAgICAgICAgICBlbGVtZW50SWRTaXplQ29tbWFuZHMucHVzaCh0aGlzLmVsZW1lbnRJZFNpemUoZWxlbS5FTEVNRU5UKSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChlbGVtZW50SWRTaXplQ29tbWFuZHMpXG4gICAgfSkudGhlbigoc2l6ZXMpID0+IHtcbiAgICAgICAgc2l6ZXMgPSBzaXplcy5tYXAoKHNpemUpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgcHJvcC5tYXRjaCgvKHdpZHRofGhlaWdodCkvKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzaXplLnZhbHVlW3Byb3BdXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUudmFsdWUud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzaXplLnZhbHVlLmhlaWdodFxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBzaXplcy5sZW5ndGggPT09IDEgPyBzaXplc1swXSA6IHNpemVzXG4gICAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0RWxlbWVudFNpemVcbiJdfQ==
