/**
 *
 * Determine an elementâ€™s location on the screen once it has been scrolled into view.
 *
 * <example>
    :getLocationInView.js
    client
        .url('http://github.com')
        .getLocationInView('.header-logo-wordmark').then(function(location) {
            console.log(location); // outputs: { x: 100, y: 200 }
        })
        .getLocationInView('.header-logo-wordmark', 'x').then(function(location) {
            console.log(location); // outputs: 100
        })
        .getLocationInView('.header-logo-wordmark', 'y').then(function(location) {
            console.log(location); // outputs: 200
        }):
 * </example>
 *
 * @param {String} selector    element with requested position offset
 * @returns {Object|Object[]}  The X and Y coordinates for the element on the page (`{x:number, y:number}`)
 *
 * @uses protocol/elements, protocol/elementIdLocationInView
 * @type property
 *
 */

'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _utilsErrorHandler = require('../utils/ErrorHandler');

var getLocationInView = function getLocationInView(selector, prop) {
    var _this = this;

    return this.elements(selector).then(function (res) {
        /**
         * throw NoSuchElement error if no element was found
         */
        if (!res.value || res.value.length === 0) {
            throw new _utilsErrorHandler.CommandError(7);
        }

        var elementIdLocationInViewCommands = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = _getIterator(res.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var elem = _step.value;

                elementIdLocationInViewCommands.push(_this.elementIdLocationInView(elem.ELEMENT));
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                    _iterator['return']();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return _Promise.all(elementIdLocationInViewCommands);
    }).then(function (locations) {
        locations = locations.map(function (location) {
            if (typeof prop === 'string' && prop.match(/(x|y)/)) {
                return location.value[prop];
            }

            return {
                x: location.value.x,
                y: location.value.y
            };
        });

        return locations.length === 1 ? locations[0] : locations;
    });
};

exports['default'] = getLocationInView;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9nZXRMb2NhdGlvbkluVmlldy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQTJCNkIsdUJBQXVCOztBQUVwRCxJQUFJLGlCQUFpQixHQUFHLFNBQXBCLGlCQUFpQixDQUFhLFFBQVEsRUFBRSxJQUFJLEVBQUU7OztBQUM5QyxXQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRyxFQUFLOzs7O0FBSXpDLFlBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUN0QyxrQkFBTSxvQ0FBaUIsQ0FBQyxDQUFDLENBQUE7U0FDNUI7O0FBRUQsWUFBSSwrQkFBK0IsR0FBRyxFQUFFLENBQUE7Ozs7OztBQUN4Qyw4Q0FBaUIsR0FBRyxDQUFDLEtBQUssNEdBQUU7b0JBQW5CLElBQUk7O0FBQ1QsK0NBQStCLENBQUMsSUFBSSxDQUFDLE1BQUssdUJBQXVCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7YUFDbkY7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRCxlQUFPLFNBQVEsR0FBRyxDQUFDLCtCQUErQixDQUFDLENBQUE7S0FDdEQsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLFNBQVMsRUFBSztBQUNuQixpQkFBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBQyxRQUFRLEVBQUs7QUFDcEMsZ0JBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDakQsdUJBQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTthQUM5Qjs7QUFFRCxtQkFBTztBQUNILGlCQUFDLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25CLGlCQUFDLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3RCLENBQUE7U0FDSixDQUFDLENBQUE7O0FBRUYsZUFBTyxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFBO0tBQzNELENBQUMsQ0FBQTtDQUNMLENBQUE7O3FCQUVjLGlCQUFpQiIsImZpbGUiOiJnZXRMb2NhdGlvbkluVmlldy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIERldGVybWluZSBhbiBlbGVtZW504oCZcyBsb2NhdGlvbiBvbiB0aGUgc2NyZWVuIG9uY2UgaXQgaGFzIGJlZW4gc2Nyb2xsZWQgaW50byB2aWV3LlxuICpcbiAqIDxleGFtcGxlPlxuICAgIDpnZXRMb2NhdGlvbkluVmlldy5qc1xuICAgIGNsaWVudFxuICAgICAgICAudXJsKCdodHRwOi8vZ2l0aHViLmNvbScpXG4gICAgICAgIC5nZXRMb2NhdGlvbkluVmlldygnLmhlYWRlci1sb2dvLXdvcmRtYXJrJykudGhlbihmdW5jdGlvbihsb2NhdGlvbikge1xuICAgICAgICAgICAgY29uc29sZS5sb2cobG9jYXRpb24pOyAvLyBvdXRwdXRzOiB7IHg6IDEwMCwgeTogMjAwIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmdldExvY2F0aW9uSW5WaWV3KCcuaGVhZGVyLWxvZ28td29yZG1hcmsnLCAneCcpLnRoZW4oZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGxvY2F0aW9uKTsgLy8gb3V0cHV0czogMTAwXG4gICAgICAgIH0pXG4gICAgICAgIC5nZXRMb2NhdGlvbkluVmlldygnLmhlYWRlci1sb2dvLXdvcmRtYXJrJywgJ3knKS50aGVuKGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhsb2NhdGlvbik7IC8vIG91dHB1dHM6IDIwMFxuICAgICAgICB9KTpcbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3IgICAgZWxlbWVudCB3aXRoIHJlcXVlc3RlZCBwb3NpdGlvbiBvZmZzZXRcbiAqIEByZXR1cm5zIHtPYmplY3R8T2JqZWN0W119ICBUaGUgWCBhbmQgWSBjb29yZGluYXRlcyBmb3IgdGhlIGVsZW1lbnQgb24gdGhlIHBhZ2UgKGB7eDpudW1iZXIsIHk6bnVtYmVyfWApXG4gKlxuICogQHVzZXMgcHJvdG9jb2wvZWxlbWVudHMsIHByb3RvY29sL2VsZW1lbnRJZExvY2F0aW9uSW5WaWV3XG4gKiBAdHlwZSBwcm9wZXJ0eVxuICpcbiAqL1xuXG5pbXBvcnQgeyBDb21tYW5kRXJyb3IgfSBmcm9tICcuLi91dGlscy9FcnJvckhhbmRsZXInXG5cbmxldCBnZXRMb2NhdGlvbkluVmlldyA9IGZ1bmN0aW9uIChzZWxlY3RvciwgcHJvcCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzKHNlbGVjdG9yKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRocm93IE5vU3VjaEVsZW1lbnQgZXJyb3IgaWYgbm8gZWxlbWVudCB3YXMgZm91bmRcbiAgICAgICAgICovXG4gICAgICAgIGlmICghcmVzLnZhbHVlIHx8IHJlcy52YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDb21tYW5kRXJyb3IoNylcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbGVtZW50SWRMb2NhdGlvbkluVmlld0NvbW1hbmRzID0gW11cbiAgICAgICAgZm9yIChsZXQgZWxlbSBvZiByZXMudmFsdWUpIHtcbiAgICAgICAgICAgIGVsZW1lbnRJZExvY2F0aW9uSW5WaWV3Q29tbWFuZHMucHVzaCh0aGlzLmVsZW1lbnRJZExvY2F0aW9uSW5WaWV3KGVsZW0uRUxFTUVOVCkpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZWxlbWVudElkTG9jYXRpb25JblZpZXdDb21tYW5kcylcbiAgICB9KS50aGVuKChsb2NhdGlvbnMpID0+IHtcbiAgICAgICAgbG9jYXRpb25zID0gbG9jYXRpb25zLm1hcCgobG9jYXRpb24pID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgcHJvcC5tYXRjaCgvKHh8eSkvKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbi52YWx1ZVtwcm9wXVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHg6IGxvY2F0aW9uLnZhbHVlLngsXG4gICAgICAgICAgICAgICAgeTogbG9jYXRpb24udmFsdWUueVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBsb2NhdGlvbnMubGVuZ3RoID09PSAxID8gbG9jYXRpb25zWzBdIDogbG9jYXRpb25zXG4gICAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TG9jYXRpb25JblZpZXdcbiJdfQ==
