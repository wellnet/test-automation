/**
 *
 * Open new window in browser. This command is the equivalent function to `window.open()`. This command does not
 * work in mobile environments.
 *
 * __Note:__ When calling this command you automatically switch to the new window.
 *
 * <example>
    :newWindow.js
    client
        .url('http://google.com')
        .getTitle().then(function(title) {
            console.log(title); // outputs: "Google"
        })
        .newWindow('http://webdriver.io', 'WebdriverIO window', 'width=420,height=230,resizable,scrollbars=yes,status=1')
        .getTitle().then(function(title) {
            console.log(title);
            // outputs the following:
            // "WebdriverIO - Selenium 2.0 javascript bindings for nodejs"
        })
        .close()
        .getTitle().then(function(title) {
            console.log(title); // outputs: "Google"
        })
        .end();
 * </example>
 *
 * @param {String} url            website URL to open
 * @param {String} windowName     name of the new window
 * @param {String} windowFeatures features of opened window (e.g. size, position, scrollbars, etc.)
 *
 * @uses protocol/execute, window/getTabIds, window/switchTab
 * @type window
 *
 */

'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _scriptsNewWindow = require('../scripts/newWindow');

var _scriptsNewWindow2 = _interopRequireDefault(_scriptsNewWindow);

var _utilsErrorHandler = require('../utils/ErrorHandler');

var newWindow = function newWindow(url) {
    var _this = this;

    var windowName = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
    var windowFeatures = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];

    /*!
     * parameter check
     */
    if (typeof url !== 'string' || typeof windowName !== 'string' || typeof windowFeatures !== 'string') {
        throw new _utilsErrorHandler.CommandError('number or type of arguments don\'t agree with newWindow command');
    }

    /*!
     * mobile check
     */
    if (this.isMobile) {
        throw new _utilsErrorHandler.CommandError('newWindow command is not supported on mobile platforms');
    }

    return this.execute(_scriptsNewWindow2['default'], url, windowName, windowFeatures).getTabIds().then(function (tabs) {
        return _this.switchTab(tabs[tabs.length - 1]);
    });
};

exports['default'] = newWindow;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9uZXdXaW5kb3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0NBb0M0QixzQkFBc0I7Ozs7aUNBQ3JCLHVCQUF1Qjs7QUFFcEQsSUFBSSxTQUFTLEdBQUcsU0FBWixTQUFTLENBQWEsR0FBRyxFQUF3Qzs7O1FBQXRDLFVBQVUseURBQUcsRUFBRTtRQUFFLGNBQWMseURBQUcsRUFBRTs7Ozs7QUFJL0QsUUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksT0FBTyxVQUFVLEtBQUssUUFBUSxJQUFJLE9BQU8sY0FBYyxLQUFLLFFBQVEsRUFBRTtBQUNqRyxjQUFNLG9DQUFpQixpRUFBaUUsQ0FBQyxDQUFBO0tBQzVGOzs7OztBQUtELFFBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNmLGNBQU0sb0NBQWlCLHdEQUF3RCxDQUFDLENBQUE7S0FDbkY7O0FBRUQsV0FBTyxJQUFJLENBQUMsT0FBTyxnQ0FBa0IsR0FBRyxFQUFFLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQ2xGLFVBQUMsSUFBSTtlQUFLLE1BQUssU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQUEsQ0FBQyxDQUFBO0NBQ3ZELENBQUE7O3FCQUVjLFNBQVMiLCJmaWxlIjoibmV3V2luZG93LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogT3BlbiBuZXcgd2luZG93IGluIGJyb3dzZXIuIFRoaXMgY29tbWFuZCBpcyB0aGUgZXF1aXZhbGVudCBmdW5jdGlvbiB0byBgd2luZG93Lm9wZW4oKWAuIFRoaXMgY29tbWFuZCBkb2VzIG5vdFxuICogd29yayBpbiBtb2JpbGUgZW52aXJvbm1lbnRzLlxuICpcbiAqIF9fTm90ZTpfXyBXaGVuIGNhbGxpbmcgdGhpcyBjb21tYW5kIHlvdSBhdXRvbWF0aWNhbGx5IHN3aXRjaCB0byB0aGUgbmV3IHdpbmRvdy5cbiAqXG4gKiA8ZXhhbXBsZT5cbiAgICA6bmV3V2luZG93LmpzXG4gICAgY2xpZW50XG4gICAgICAgIC51cmwoJ2h0dHA6Ly9nb29nbGUuY29tJylcbiAgICAgICAgLmdldFRpdGxlKCkudGhlbihmdW5jdGlvbih0aXRsZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2codGl0bGUpOyAvLyBvdXRwdXRzOiBcIkdvb2dsZVwiXG4gICAgICAgIH0pXG4gICAgICAgIC5uZXdXaW5kb3coJ2h0dHA6Ly93ZWJkcml2ZXIuaW8nLCAnV2ViZHJpdmVySU8gd2luZG93JywgJ3dpZHRoPTQyMCxoZWlnaHQ9MjMwLHJlc2l6YWJsZSxzY3JvbGxiYXJzPXllcyxzdGF0dXM9MScpXG4gICAgICAgIC5nZXRUaXRsZSgpLnRoZW4oZnVuY3Rpb24odGl0bGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRpdGxlKTtcbiAgICAgICAgICAgIC8vIG91dHB1dHMgdGhlIGZvbGxvd2luZzpcbiAgICAgICAgICAgIC8vIFwiV2ViZHJpdmVySU8gLSBTZWxlbml1bSAyLjAgamF2YXNjcmlwdCBiaW5kaW5ncyBmb3Igbm9kZWpzXCJcbiAgICAgICAgfSlcbiAgICAgICAgLmNsb3NlKClcbiAgICAgICAgLmdldFRpdGxlKCkudGhlbihmdW5jdGlvbih0aXRsZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2codGl0bGUpOyAvLyBvdXRwdXRzOiBcIkdvb2dsZVwiXG4gICAgICAgIH0pXG4gICAgICAgIC5lbmQoKTtcbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsICAgICAgICAgICAgd2Vic2l0ZSBVUkwgdG8gb3BlblxuICogQHBhcmFtIHtTdHJpbmd9IHdpbmRvd05hbWUgICAgIG5hbWUgb2YgdGhlIG5ldyB3aW5kb3dcbiAqIEBwYXJhbSB7U3RyaW5nfSB3aW5kb3dGZWF0dXJlcyBmZWF0dXJlcyBvZiBvcGVuZWQgd2luZG93IChlLmcuIHNpemUsIHBvc2l0aW9uLCBzY3JvbGxiYXJzLCBldGMuKVxuICpcbiAqIEB1c2VzIHByb3RvY29sL2V4ZWN1dGUsIHdpbmRvdy9nZXRUYWJJZHMsIHdpbmRvdy9zd2l0Y2hUYWJcbiAqIEB0eXBlIHdpbmRvd1xuICpcbiAqL1xuXG5pbXBvcnQgbmV3V2luZG93SGVscGVyIGZyb20gJy4uL3NjcmlwdHMvbmV3V2luZG93J1xuaW1wb3J0IHsgQ29tbWFuZEVycm9yIH0gZnJvbSAnLi4vdXRpbHMvRXJyb3JIYW5kbGVyJ1xuXG5sZXQgbmV3V2luZG93ID0gZnVuY3Rpb24gKHVybCwgd2luZG93TmFtZSA9ICcnLCB3aW5kb3dGZWF0dXJlcyA9ICcnKSB7XG4gICAgLyohXG4gICAgICogcGFyYW1ldGVyIGNoZWNrXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiB3aW5kb3dOYW1lICE9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygd2luZG93RmVhdHVyZXMgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBDb21tYW5kRXJyb3IoJ251bWJlciBvciB0eXBlIG9mIGFyZ3VtZW50cyBkb25cXCd0IGFncmVlIHdpdGggbmV3V2luZG93IGNvbW1hbmQnKVxuICAgIH1cblxuICAgIC8qIVxuICAgICAqIG1vYmlsZSBjaGVja1xuICAgICAqL1xuICAgIGlmICh0aGlzLmlzTW9iaWxlKSB7XG4gICAgICAgIHRocm93IG5ldyBDb21tYW5kRXJyb3IoJ25ld1dpbmRvdyBjb21tYW5kIGlzIG5vdCBzdXBwb3J0ZWQgb24gbW9iaWxlIHBsYXRmb3JtcycpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShuZXdXaW5kb3dIZWxwZXIsIHVybCwgd2luZG93TmFtZSwgd2luZG93RmVhdHVyZXMpLmdldFRhYklkcygpLnRoZW4oXG4gICAgICAgICh0YWJzKSA9PiB0aGlzLnN3aXRjaFRhYih0YWJzW3RhYnMubGVuZ3RoIC0gMV0pKVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXdXaW5kb3dcbiJdfQ==
