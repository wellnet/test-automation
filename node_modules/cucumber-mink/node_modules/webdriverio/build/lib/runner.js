'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _utilsConfigParser = require('./utils/ConfigParser');

var _utilsConfigParser2 = _interopRequireDefault(_utilsConfigParser);

var _ = require('../');

var Runner = (function () {
    function Runner() {
        _classCallCheck(this, Runner);

        this.haltSIGINT = false;
        this.sigintWasCalled = false;
        this.hasSessionID = false;
        this.failures = 0;
    }

    _createClass(Runner, [{
        key: 'run',
        value: function run(m) {
            var config, capabilities;
            return _regeneratorRuntime.async(function run$(context$2$0) {
                var _this = this;

                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        this.cid = m.cid;

                        this.configParser = new _utilsConfigParser2['default']();
                        this.configParser.addConfigFile(m.configFile);
                        this.configParser.merge(m.argv);

                        config = this.configParser.getConfig();
                        capabilities = this.configParser.getCapabilities(m.cid);

                        this.framework = this.initialiseFramework(config);
                        global.browser = this.initialiseInstance(m.isMultiremote, capabilities);
                        this.initialisePlugins(config);

                        /**
                         * store end method before it gets fiberised by wdio-sync
                         */
                        this.endSession = global.browser.end.bind(global.browser);

                        /**
                         * initialisation successful, send start message
                         */
                        process.send({
                            event: 'runner:start',
                            cid: m.cid,
                            capabilities: capabilities,
                            config: config
                        });

                        /**
                         * register runner events
                         */
                        global.browser.on('init', function (payload) {
                            process.send({
                                event: 'runner:init',
                                cid: m.cid,
                                sessionID: payload.sessionID,
                                options: payload.options,
                                desiredCapabilities: payload.desiredCapabilities
                            });

                            _this.hasSessionID = true;
                        });

                        global.browser.on('command', function (payload) {
                            process.send({
                                event: 'runner:command',
                                cid: m.cid,
                                method: payload.method,
                                uri: payload.uri,
                                data: payload.data
                            });
                        });

                        global.browser.on('result', function (payload) {
                            process.send({
                                event: 'runner:result',
                                cid: m.cid,
                                requestData: payload.requestData,
                                requestOptions: payload.requestOptions,
                                body: payload.body // ToDo figure out if this slows down the execution time
                            });
                        });

                        global.browser.on('error', function (payload) {
                            process.send({
                                event: 'runner:error',
                                cid: m.cid,
                                err: payload.err,
                                requestData: payload.requestData,
                                requestOptions: payload.requestOptions,
                                body: payload.body
                            });
                        });

                        this.haltSIGINT = true;

                        context$2$0.prev = 16;
                        context$2$0.next = 19;
                        return _regeneratorRuntime.awrap(global.browser.init());

                    case 19:
                        this.haltSIGINT = false;

                        /**
                         * kill session of SIGINT signal showed up while trying to
                         * get a session ID
                         */

                        if (!this.sigintWasCalled) {
                            context$2$0.next = 23;
                            break;
                        }

                        context$2$0.next = 23;
                        return _regeneratorRuntime.awrap(this.end(1));

                    case 23:
                        context$2$0.next = 25;
                        return _regeneratorRuntime.awrap(this.framework.run(m.cid, config, m.specs, capabilities));

                    case 25:
                        this.failures = context$2$0.sent;
                        context$2$0.next = 28;
                        return _regeneratorRuntime.awrap(this.end(this.failures));

                    case 28:
                        context$2$0.next = 35;
                        break;

                    case 30:
                        context$2$0.prev = 30;
                        context$2$0.t0 = context$2$0['catch'](16);

                        process.send({
                            event: 'error',
                            cid: this.cid,
                            capabilities: capabilities,
                            error: {
                                message: context$2$0.t0.message,
                                stack: context$2$0.t0.stack
                            }
                        });

                        context$2$0.next = 35;
                        return _regeneratorRuntime.awrap(this.end(1));

                    case 35:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[16, 30]]);
        }

        /**
         * end test runner instance and exit process
         */
    }, {
        key: 'end',
        value: function end() {
            var failures = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
            return _regeneratorRuntime.async(function end$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        if (!this.hasSessionID) {
                            context$2$0.next = 3;
                            break;
                        }

                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(this.endSession());

                    case 3:

                        process.send({
                            event: 'runner:end',
                            failures: failures,
                            cid: this.cid
                        });
                        process.exit(failures === 0 ? 0 : 1);

                    case 5:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'sigintHandler',
        value: function sigintHandler() {
            if (this.sigintWasCalled) {
                return;
            }

            this.sigintWasCalled = true;

            if (this.haltSIGINT) {
                return;
            }

            global.browser.removeAllListeners();
            this.end(1);
        }
    }, {
        key: 'initialiseFramework',
        value: function initialiseFramework(config) {
            var frameworkAdapter = undefined;

            if (typeof config.framework !== 'string') {
                throw new Error('You haven\'t defined a valid framework. ' + 'Please checkout http://webdriver.io/guide/testrunner/frameworks.html');
            }

            var frameworkLibrary = config.framework.toLowerCase();
            try {
                frameworkAdapter = require('wdio-' + frameworkLibrary + '-framework');
                frameworkAdapter = frameworkAdapter.adapterFactory;
            } catch (e) {
                throw new Error('Couldn\'t load "' + frameworkLibrary + '" framework. You need to install ' + ('it with `$ npm install wdio-' + frameworkLibrary + '-framework`!'));
            }

            if (typeof frameworkAdapter.run !== 'function') {
                throw new Error('The framework adapter you\'ve choosen ("wdio-' + frameworkLibrary + '-framework") ' + 'is not compliant to WebdriverIO! It doesn\'t provide any run method.');
            }

            return frameworkAdapter;
        }
    }, {
        key: 'initialiseInstance',
        value: function initialiseInstance(isMultiremote, capabilities) {
            var config = this.configParser.getConfig();

            if (!isMultiremote) {
                config.desiredCapabilities = capabilities;
                return (0, _.remote)(config);
            }

            var options = capabilities;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _getIterator(_Object$keys(options)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var browserName = _step.value;

                    options[browserName] = (0, _deepmerge2['default'])(config, options[browserName]);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var browser = (0, _.multiremote)(options);
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = _getIterator(_Object$keys(options)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var browserName = _step2.value;

                    global[browserName] = browser.select(browserName);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                        _iterator2['return']();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return browser;
        }

        /**
         * initialise WebdriverIO compliant plugins
         */
    }, {
        key: 'initialisePlugins',
        value: function initialisePlugins(config) {
            if (typeof config.plugins !== 'object') {
                return;
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = _getIterator(_Object$keys(config.plugins)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var pluginName = _step3.value;

                    var plugin = undefined;

                    try {
                        plugin = require(pluginName);
                    } catch (e) {
                        throw new Error('Couldn\'t find plugin "' + pluginName + '". You need to install it ' + ('with `$ npm install ' + pluginName + '`!'));
                    }

                    if (typeof plugin.init !== 'function') {
                        throw new Error('The plugin "' + pluginName + '" is not WebdriverIO compliant!');
                    }

                    plugin.init(global.browser, config.plugins[pluginName]);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                        _iterator3['return']();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    }]);

    return Runner;
})();

var runner = new Runner();

process.on('message', function (m) {
    runner[m.command](m)['catch'](function (e) {
        /**
         * custom exit code to propagate initialisation error
         */
        process.send({
            event: 'runner:error',
            error: {
                message: e.message,
                stack: e.stack
            },
            capabilities: runner.configParser.getCapabilities(runner.cid),
            cid: runner.cid
        });
        process.exit(1);
    });
});

/**
 * catches ctrl+c event
 */
process.on('SIGINT', function () {
    runner.sigintHandler();
});
//# sourceMappingURL=data:application/json;base64,
