#!/usr/bin/env node

var cli = require('../lib/optionParser.js').createParser();

cli.option('-c, --compile compile each file');
cli.option("-u, --ugly don't prettify when compiling");
cli.option("-l, --lex tokenise each file");
cli.option("-w, --watch watch and compile files when they change");
cli.option("-s, --if-stale only compile files if they are out of date");
cli.option("-h, --help print herlp!");
cli.option("--debug run the node debugger");
cli.option("--debug-brk run the node debugger, breaking on the first line");
cli.option("-p, --promises=<promise-module> select a promises module, the default is 'none' (uses the global Promise)");
options = cli.parse(process.argv.slice(2));

var commandLine = require('..');

try {
  if (options.help) {
    cli.help ();
  } else if (options.debug || options.debugBrk || options._[0] == 'debug') {
    require('../lib/debugPogo').debugPogo();
  } else if (options.lex) {
    for (var i in options._) {
      commandLine.lexFile(options._[i]);
    }
  } else if (options.compile) {
    if (options._.length > 0) {
      for (var i in options._) {
        if (options.watch) {
          commandLine.watchFile(options._[i], options);
        } else if (options.ifStale) {
          commandLine.compileFileIfStale(options._[i], options);
        } else {
          commandLine.compileFile(options._[i], options);
        }
      }
    } else {
      readFromStream(process.stdin, function (error, contents) {
        if (error) {
          console.log(error);
        } else {
          var js = commandLine.compile(contents, options);
          console.log(js);
        }
      });
    }
  } else if (options._.length === 0) {
    commandLine.repl();
  } else {
    commandLine.runMain(options._[0], options);
  }
} catch (error) {
  if (error.isSemanticErrors) {
    process.stderr.write(error.message);
  } else {
    console.log(error);
  }
}

function readFromStream(stream, cb) {
  var chunks = [];
  stream.on('data', function (chunk) {
    chunks.push(chunk);
  });
  stream.on('end', function () {
    cb(undefined, chunks.join(''));
  });
  stream.on('error', function (error) {
    cb(error);
  });
}
